## （一）List的基本操作实战
#### List基础讲解
List:

1. 与数组类似，列表是同质的，列表内元素类型相同
1. List元素可重复
2. 和数组不同的是List的某个元素值不可变
```
object ListDemo1 {
  def main(args: Array[String]): Unit = {
    //List的两种声明方式
    //方式一:
    val bigData = List("hadoop","spark","mapReduce")
    val data = List(1,2,3,4,5)
    //方式二:   （::右结合方式）
    val list_string = "hadoop"::"Spark"::Nil
    val list_int = 1::2::3::4::Nil
    
    println(data.isEmpty)       //false
    //List的head指第一个元素，tail指除第一个元素外剩余的元素
    println(bigData.head)       //hadoop
    println(list_string.tail)   //List(Spark)
    println(list_int.tail.head) //2
    
    //有时需要提取出集合中的元素重新赋给一个常量
    val List(course1,course2) = list_string
    //可以只取出前面的元素
    val x::y::rest = data
    println("course1 is "+course1+",course2 is "+course2) 
    //course1 is hadoop,course2 is Spark
    
    println("x:"+x+",y:"+y+",rest is "+rest)              
    //x:1,y:2,rest is List(3, 4, 5)
  }
}
```
#### 基于模式匹配的List排序算法实现
```
object ListDemo1 {
  def main(args: Array[String]): Unit = {
    val shuffledData = List(5,2,9,7,3,14,11,6,2)
    println(sortList(shuffledData))
    //总体思路是从末尾的2开始，层层递归排序
    //递归
    def sortList(list:List[Int]):List[Int] = list match{
      case List() => List()
      case head::tail => compare(head,sortList(tail)) 
    }
    //递归
    def compare(data:Int,dataSet:List[Int]):List[Int] = dataSet match{
      case List() => List(data)
      //排序的关键
      case head::tail => if(data<=head) data::dataSet
      else head::compare(data,tail)
    }
  }
}
```
## （二）List的一阶函数操作
#### drop,take,splitAt,apply,indices,toString,mkString等
```
//集合之间使用:::来连接,最后返回包含所有元素的List
println(List(1,2,3):::List(4,5,6):::List(6,7,8))  //List(1, 2, 3, 4, 5, 6, 6, 7, 8)
//计算list的大小/长度
val dataList = List(1,2,3,4,5)
println(dataList.size)
//length方法很慢，尽量不用
println(dataList.length)

val cList = List("Hadoop","Scala","Spark","Kaffka")
//集合最后一个元素
println(cList.last)    //Kaffka
//最后一个元素之前的所有元素
println(cList.init)    //List(Hadoop, Scala, Spark)
//在打印时，将集合元素的顺序倒转（集合本身没有改变）
println(cList.reverse) //List(Kaffka, Spark, Scala, Hadoop)
//打印集合
println(cList)         //List(Hadoop, Scala, Spark, Kaffka)

//cList.take(n)等同于cList take n
//取出前n个元素
println(cList take 2)  //List(Hadoop, Scala)
//去掉前n个元素
println(cList drop 2)  //List(Spark, Kaffka)
//以n为单元个数分组
println(cList splitAt 2) //(List(Hadoop, Scala),List(Spark, Kaffka))
//取出索引为n的元素
println(cList apply 2) //Spark
println(cList(2))      //Spark


val data = List('a','b','c','d','e')
//获取每个元素的索引
println(data.indices)
//拉链组合,元素与其索引
println(data.indices zip data)
println(data.zipWithIndex)
/*
 * toString:a string representation of this collection. 
 * By default this string consists of the stringPrefix of this list, 
 * followed by all elements separated by commas and enclosed in parentheses
*/
println(data.toString()) //其内部实现mkString List(a, b, c, d, e)
//mkString,生成字符串，按指定格式输出
println(data.mkString("[", ",", "]")) //[a,b,c,d,e]
println(data.mkString(":"))           //a:b:c:d:e
println(data.mkString)                //abcde

//stringBuffer的使用
val buffer = new StringBuilder
//将data按照第二个参数指定的格式放入到buffer中
data addString(buffer,"[", ":", "]")
println(buffer)   //[a:b:c:d:e]
```
#### toIterator,toArray,copyToArray等
```
//toArray,toList List和Array的相互转换
val array0 = data.toArray
println(array0(2))   //c
val array1 = Array("zhangsan","lisi","wangwu")
println(array1.toList) //List(zhangsan, lisi, wangwu)

//copyToArray将集合的元素放入到一个指定的数组中
val charArray = new Array[Char](5)
charArray(0) = 'g'
//从索引为1的位置，开始放入集合元素，集合长度，大于数组剩余长度，到数组满为止
data.copyToArray(charArray, 1)
charArray.foreach(print)
println

//toIterator,返回一个迭代器，用于遍历集合元素
val iterator = cList.toIterator
while (!iterator.isEmpty) {
  println(iterator.next())
}
```

## （三）对List进行高效的排序和倒排序
```
object ListDemo3 {
  def main(args: Array[String]): Unit = {
    //归并排序
    /**
     * 参数一：函数，实现两个元素大小的比较，决定排列是升序还是降序
     * 参数二：要排序的列表
     * T:泛型的方式
     */
    def mergedsort[T](less:(T,T) => Boolean)(input:List[T]):List[T] = {
    		/*
    		 * @param xList 要合并的有序列表
    		 * @param yList 要合并的有序列表
    		 * @return List 合并后的列表
    		 */
    		def merge(xList:List[T],yList:List[T]):List[T] = (xList,yList) match{
      		case (Nil,_) => yList
      		case (_,Nil) => xList
      		case (x::xtail,y::ytail) =>
      		if(less(x,y)) x::merge(xtail,yList)
      		else y::merge(xList,ytail)
    		}
    		val n = input.length/2
    		if(n == 0) input    //当分的只剩一个数的时候，长度就为零了
    		else{
    			val (x,y) = input splitAt n //把要降序的列表input平均分成两个列表
    			merge(mergedsort(less)(x),mergedsort(less)(y)) //先对分好的两个列表归并排序，再对排好的有序列表进行归并
    		}
    }
    //这里实现了less
    println(mergedsort((x:Int,y:Int) => x < y)(List(3,7,9,5,2,11)))
    val reversed_mergedsort = mergedsort((x:Int,y:Int) => x > y) _
    println(reversed_mergedsort(List(3,7,9,5,2,11)))
  }
}
```

## （四）List的map、flatMap、foreach、filter操作
```
object MapDemo {
  //这里将的是List下面的map、flatMap函数
  def main(args: Array[String]){
    //map将一个映射规则作用于集合上
    println(List(1,2,3,4) map(_+2))          //List(3, 4, 5, 6)
    val data = List("Spark","Scala","Hadoop","MapReduce")
    println(data map(_.length))              //List(5, 5, 6, 9)
    println(data map(_.toList.reverse.mkString))//List(krapS, alacS, poodaH, ecudeRpaM)
    //map与flatMap的区别
    println(data map(_.toList))
    println(data flatMap(_.toList)) //对原本map后的结果进行了合并，合并集合
    //flapMap的应用
    //range[)前闭后开
    println(List.range(1, 10) flatMap(i=>List.range(1, i) map(j=>(i,j))))
    //打印结果截取List((2,1), (3,1), (3,2), (4,1), (4,2), (4,3), (5,1), (5,2)
    
    //list的foreach()
    var sum = 0
    List(1,2,3,4,5) foreach(sum+=_)
    println("sum="+sum)
    
    //list的filter
    println(List.range(1,20) filter(_%2==0)) //List(2, 4, 6, 8, 10, 12, 14, 16, 18)
    println(data filter(_.length()==5))      //List(Spark, Scala)
  }
}
```

## （五）List的partition、find、takeWhile、dropWhile、span、forall、exsists操作
```
object ListDemo5 {
  def main(args: Array[String]): Unit = {
    //partition(布尔表达式) 按照给出的条件，将List分为不同的部分
    var data = List(1,5,10,4,2,6,7,8,3,9) 
    println(data partition(_%2==0)) //(List(2, 4, 6, 8, 10),List(1, 3, 5, 7, 9))
    //find(布尔表达式) 找出第一个符合条件的元素，找不到返回none
    println(data find(_%3==0))  //Some(3)
    println(data find(_>10))    //None
    
    //以下三各方法，若想要使符合条件的所有元素都实现相应的功能，则需先进行排序
    //takeWhile(布尔表达式) 从前遍历，将满足条件的元素依次放入结果集中，直到遇到不满足条件的为止
    //dropWhile(布尔表达式) 从前遍历，将满足条件的元素依次剔除掉，直到遇到不满足的条件的元素为止
    println(data takeWhile(_ < 10)) //List(1, 5)
    println(data dropWhile(_ < 10)) //List(10, 4, 2, 6, 7, 8, 3, 9)
    //span(布尔表达式) 从前遍历，直到不满足条件为止，效果是分块
    println(data span(_ < 10))  //(List(1, 5),List(10, 4, 2, 6, 7, 8, 3, 9))
    
    //forall(布尔表达式) exists(布尔表达式) 返回值：布尔值
    def hasAllZeroRow(m:List[List[Int]]) = m exists (_ forall (_ == 0)) //(row => row forall (_ == 0))
    val m = List(List(1,1,2),List(0,0,1),List(0,0,0))
    println(hasAllZeroRow(m))   //true
  }
}
```
## （六）List的foldLeft、foldRight、sort操作
```
object ListDemo6 {
  def main(args: Array[String]): Unit = {
    //foldLeft,运算往左边叠加,以下是foldLeft的两种实现方式
    println((1 to 100).foldLeft(0)(_ + _))     //5050
    println(List(1,2,3,4,5).foldLeft(0)(_ + _))//15
    println((0 /: (1 to 100))(_ + _))          //5050
    
    //foldRight,运算正好和foldLeft是反着的,是往右边运算，初始值在右边
    println((1 to 5).foldRight(10)(_ - _))     //-7
    println(List(1,2,3,4,5).foldRight(10)(_ - _)) //-7
    println(((1 to 5) :\ 100)(_ - _))  //-97
    //其时间复杂度是线性的
    println(List(10,-2,4,35,2,7,-1) sortWith(_ > _)) //降序排列
    println(List(10,-2,4,35,2,7,-1) sortWith(_ < _)) //升序排列
  }
}
```

## （七）List伴生对象操作方法代码实战
```

```

